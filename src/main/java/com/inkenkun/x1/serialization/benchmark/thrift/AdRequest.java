/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.inkenkun.x1.serialization.benchmark.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-08")
public class AdRequest implements org.apache.thrift.TBase<AdRequest, AdRequest._Fields>, java.io.Serializable, Cloneable, Comparable<AdRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AdRequest");

  private static final org.apache.thrift.protocol.TField ROW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rowID", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLICKS_FIELD_DESC = new org.apache.thrift.protocol.TField("clicks", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField IMPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("impression", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DISPLAY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("displayURL", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adID", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ADVERTISER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("advertiserID", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DEPTH_FIELD_DESC = new org.apache.thrift.protocol.TField("depth", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queryID", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField KEYWORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("keywordID", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TITLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("titleID", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("descriptionID", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AdRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AdRequestTupleSchemeFactory();

  public long rowID; // required
  public int clicks; // required
  public int impression; // required
  public java.lang.String displayURL; // required
  public int adID; // required
  public int advertiserID; // required
  public short depth; // required
  public short position; // required
  public int queryID; // required
  public int keywordID; // required
  public int titleID; // required
  public int descriptionID; // required
  public int userID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROW_ID((short)1, "rowID"),
    CLICKS((short)2, "clicks"),
    IMPRESSION((short)3, "impression"),
    DISPLAY_URL((short)4, "displayURL"),
    AD_ID((short)5, "adID"),
    ADVERTISER_ID((short)6, "advertiserID"),
    DEPTH((short)7, "depth"),
    POSITION((short)8, "position"),
    QUERY_ID((short)9, "queryID"),
    KEYWORD_ID((short)10, "keywordID"),
    TITLE_ID((short)11, "titleID"),
    DESCRIPTION_ID((short)12, "descriptionID"),
    USER_ID((short)13, "userID");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROW_ID
          return ROW_ID;
        case 2: // CLICKS
          return CLICKS;
        case 3: // IMPRESSION
          return IMPRESSION;
        case 4: // DISPLAY_URL
          return DISPLAY_URL;
        case 5: // AD_ID
          return AD_ID;
        case 6: // ADVERTISER_ID
          return ADVERTISER_ID;
        case 7: // DEPTH
          return DEPTH;
        case 8: // POSITION
          return POSITION;
        case 9: // QUERY_ID
          return QUERY_ID;
        case 10: // KEYWORD_ID
          return KEYWORD_ID;
        case 11: // TITLE_ID
          return TITLE_ID;
        case 12: // DESCRIPTION_ID
          return DESCRIPTION_ID;
        case 13: // USER_ID
          return USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROWID_ISSET_ID = 0;
  private static final int __CLICKS_ISSET_ID = 1;
  private static final int __IMPRESSION_ISSET_ID = 2;
  private static final int __ADID_ISSET_ID = 3;
  private static final int __ADVERTISERID_ISSET_ID = 4;
  private static final int __DEPTH_ISSET_ID = 5;
  private static final int __POSITION_ISSET_ID = 6;
  private static final int __QUERYID_ISSET_ID = 7;
  private static final int __KEYWORDID_ISSET_ID = 8;
  private static final int __TITLEID_ISSET_ID = 9;
  private static final int __DESCRIPTIONID_ISSET_ID = 10;
  private static final int __USERID_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROW_ID, new org.apache.thrift.meta_data.FieldMetaData("rowID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLICKS, new org.apache.thrift.meta_data.FieldMetaData("clicks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMPRESSION, new org.apache.thrift.meta_data.FieldMetaData("impression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISPLAY_URL, new org.apache.thrift.meta_data.FieldMetaData("displayURL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADVERTISER_ID, new org.apache.thrift.meta_data.FieldMetaData("advertiserID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPTH, new org.apache.thrift.meta_data.FieldMetaData("depth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("queryID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KEYWORD_ID, new org.apache.thrift.meta_data.FieldMetaData("keywordID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE_ID, new org.apache.thrift.meta_data.FieldMetaData("titleID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESCRIPTION_ID, new org.apache.thrift.meta_data.FieldMetaData("descriptionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AdRequest.class, metaDataMap);
  }

  public AdRequest() {
  }

  public AdRequest(
    long rowID,
    int clicks,
    int impression,
    java.lang.String displayURL,
    int adID,
    int advertiserID,
    short depth,
    short position,
    int queryID,
    int keywordID,
    int titleID,
    int descriptionID,
    int userID)
  {
    this();
    this.rowID = rowID;
    setRowIDIsSet(true);
    this.clicks = clicks;
    setClicksIsSet(true);
    this.impression = impression;
    setImpressionIsSet(true);
    this.displayURL = displayURL;
    this.adID = adID;
    setAdIDIsSet(true);
    this.advertiserID = advertiserID;
    setAdvertiserIDIsSet(true);
    this.depth = depth;
    setDepthIsSet(true);
    this.position = position;
    setPositionIsSet(true);
    this.queryID = queryID;
    setQueryIDIsSet(true);
    this.keywordID = keywordID;
    setKeywordIDIsSet(true);
    this.titleID = titleID;
    setTitleIDIsSet(true);
    this.descriptionID = descriptionID;
    setDescriptionIDIsSet(true);
    this.userID = userID;
    setUserIDIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AdRequest(AdRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rowID = other.rowID;
    this.clicks = other.clicks;
    this.impression = other.impression;
    if (other.isSetDisplayURL()) {
      this.displayURL = other.displayURL;
    }
    this.adID = other.adID;
    this.advertiserID = other.advertiserID;
    this.depth = other.depth;
    this.position = other.position;
    this.queryID = other.queryID;
    this.keywordID = other.keywordID;
    this.titleID = other.titleID;
    this.descriptionID = other.descriptionID;
    this.userID = other.userID;
  }

  public AdRequest deepCopy() {
    return new AdRequest(this);
  }

  @Override
  public void clear() {
    setRowIDIsSet(false);
    this.rowID = 0;
    setClicksIsSet(false);
    this.clicks = 0;
    setImpressionIsSet(false);
    this.impression = 0;
    this.displayURL = null;
    setAdIDIsSet(false);
    this.adID = 0;
    setAdvertiserIDIsSet(false);
    this.advertiserID = 0;
    setDepthIsSet(false);
    this.depth = 0;
    setPositionIsSet(false);
    this.position = 0;
    setQueryIDIsSet(false);
    this.queryID = 0;
    setKeywordIDIsSet(false);
    this.keywordID = 0;
    setTitleIDIsSet(false);
    this.titleID = 0;
    setDescriptionIDIsSet(false);
    this.descriptionID = 0;
    setUserIDIsSet(false);
    this.userID = 0;
  }

  public long getRowID() {
    return this.rowID;
  }

  public AdRequest setRowID(long rowID) {
    this.rowID = rowID;
    setRowIDIsSet(true);
    return this;
  }

  public void unsetRowID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROWID_ISSET_ID);
  }

  /** Returns true if field rowID is set (has been assigned a value) and false otherwise */
  public boolean isSetRowID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROWID_ISSET_ID);
  }

  public void setRowIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROWID_ISSET_ID, value);
  }

  public int getClicks() {
    return this.clicks;
  }

  public AdRequest setClicks(int clicks) {
    this.clicks = clicks;
    setClicksIsSet(true);
    return this;
  }

  public void unsetClicks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLICKS_ISSET_ID);
  }

  /** Returns true if field clicks is set (has been assigned a value) and false otherwise */
  public boolean isSetClicks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLICKS_ISSET_ID);
  }

  public void setClicksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLICKS_ISSET_ID, value);
  }

  public int getImpression() {
    return this.impression;
  }

  public AdRequest setImpression(int impression) {
    this.impression = impression;
    setImpressionIsSet(true);
    return this;
  }

  public void unsetImpression() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IMPRESSION_ISSET_ID);
  }

  /** Returns true if field impression is set (has been assigned a value) and false otherwise */
  public boolean isSetImpression() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IMPRESSION_ISSET_ID);
  }

  public void setImpressionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IMPRESSION_ISSET_ID, value);
  }

  public java.lang.String getDisplayURL() {
    return this.displayURL;
  }

  public AdRequest setDisplayURL(java.lang.String displayURL) {
    this.displayURL = displayURL;
    return this;
  }

  public void unsetDisplayURL() {
    this.displayURL = null;
  }

  /** Returns true if field displayURL is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayURL() {
    return this.displayURL != null;
  }

  public void setDisplayURLIsSet(boolean value) {
    if (!value) {
      this.displayURL = null;
    }
  }

  public int getAdID() {
    return this.adID;
  }

  public AdRequest setAdID(int adID) {
    this.adID = adID;
    setAdIDIsSet(true);
    return this;
  }

  public void unsetAdID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  /** Returns true if field adID is set (has been assigned a value) and false otherwise */
  public boolean isSetAdID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  public void setAdIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ADID_ISSET_ID, value);
  }

  public int getAdvertiserID() {
    return this.advertiserID;
  }

  public AdRequest setAdvertiserID(int advertiserID) {
    this.advertiserID = advertiserID;
    setAdvertiserIDIsSet(true);
    return this;
  }

  public void unsetAdvertiserID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ADVERTISERID_ISSET_ID);
  }

  /** Returns true if field advertiserID is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvertiserID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ADVERTISERID_ISSET_ID);
  }

  public void setAdvertiserIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ADVERTISERID_ISSET_ID, value);
  }

  public short getDepth() {
    return this.depth;
  }

  public AdRequest setDepth(short depth) {
    this.depth = depth;
    setDepthIsSet(true);
    return this;
  }

  public void unsetDepth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEPTH_ISSET_ID);
  }

  /** Returns true if field depth is set (has been assigned a value) and false otherwise */
  public boolean isSetDepth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEPTH_ISSET_ID);
  }

  public void setDepthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEPTH_ISSET_ID, value);
  }

  public short getPosition() {
    return this.position;
  }

  public AdRequest setPosition(short position) {
    this.position = position;
    setPositionIsSet(true);
    return this;
  }

  public void unsetPosition() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  public void setPositionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
  }

  public int getQueryID() {
    return this.queryID;
  }

  public AdRequest setQueryID(int queryID) {
    this.queryID = queryID;
    setQueryIDIsSet(true);
    return this;
  }

  public void unsetQueryID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYID_ISSET_ID);
  }

  /** Returns true if field queryID is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYID_ISSET_ID);
  }

  public void setQueryIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYID_ISSET_ID, value);
  }

  public int getKeywordID() {
    return this.keywordID;
  }

  public AdRequest setKeywordID(int keywordID) {
    this.keywordID = keywordID;
    setKeywordIDIsSet(true);
    return this;
  }

  public void unsetKeywordID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEYWORDID_ISSET_ID);
  }

  /** Returns true if field keywordID is set (has been assigned a value) and false otherwise */
  public boolean isSetKeywordID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEYWORDID_ISSET_ID);
  }

  public void setKeywordIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEYWORDID_ISSET_ID, value);
  }

  public int getTitleID() {
    return this.titleID;
  }

  public AdRequest setTitleID(int titleID) {
    this.titleID = titleID;
    setTitleIDIsSet(true);
    return this;
  }

  public void unsetTitleID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TITLEID_ISSET_ID);
  }

  /** Returns true if field titleID is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TITLEID_ISSET_ID);
  }

  public void setTitleIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TITLEID_ISSET_ID, value);
  }

  public int getDescriptionID() {
    return this.descriptionID;
  }

  public AdRequest setDescriptionID(int descriptionID) {
    this.descriptionID = descriptionID;
    setDescriptionIDIsSet(true);
    return this;
  }

  public void unsetDescriptionID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DESCRIPTIONID_ISSET_ID);
  }

  /** Returns true if field descriptionID is set (has been assigned a value) and false otherwise */
  public boolean isSetDescriptionID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DESCRIPTIONID_ISSET_ID);
  }

  public void setDescriptionIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DESCRIPTIONID_ISSET_ID, value);
  }

  public int getUserID() {
    return this.userID;
  }

  public AdRequest setUserID(int userID) {
    this.userID = userID;
    setUserIDIsSet(true);
    return this;
  }

  public void unsetUserID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ROW_ID:
      if (value == null) {
        unsetRowID();
      } else {
        setRowID((java.lang.Long)value);
      }
      break;

    case CLICKS:
      if (value == null) {
        unsetClicks();
      } else {
        setClicks((java.lang.Integer)value);
      }
      break;

    case IMPRESSION:
      if (value == null) {
        unsetImpression();
      } else {
        setImpression((java.lang.Integer)value);
      }
      break;

    case DISPLAY_URL:
      if (value == null) {
        unsetDisplayURL();
      } else {
        setDisplayURL((java.lang.String)value);
      }
      break;

    case AD_ID:
      if (value == null) {
        unsetAdID();
      } else {
        setAdID((java.lang.Integer)value);
      }
      break;

    case ADVERTISER_ID:
      if (value == null) {
        unsetAdvertiserID();
      } else {
        setAdvertiserID((java.lang.Integer)value);
      }
      break;

    case DEPTH:
      if (value == null) {
        unsetDepth();
      } else {
        setDepth((java.lang.Short)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((java.lang.Short)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQueryID();
      } else {
        setQueryID((java.lang.Integer)value);
      }
      break;

    case KEYWORD_ID:
      if (value == null) {
        unsetKeywordID();
      } else {
        setKeywordID((java.lang.Integer)value);
      }
      break;

    case TITLE_ID:
      if (value == null) {
        unsetTitleID();
      } else {
        setTitleID((java.lang.Integer)value);
      }
      break;

    case DESCRIPTION_ID:
      if (value == null) {
        unsetDescriptionID();
      } else {
        setDescriptionID((java.lang.Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ROW_ID:
      return getRowID();

    case CLICKS:
      return getClicks();

    case IMPRESSION:
      return getImpression();

    case DISPLAY_URL:
      return getDisplayURL();

    case AD_ID:
      return getAdID();

    case ADVERTISER_ID:
      return getAdvertiserID();

    case DEPTH:
      return getDepth();

    case POSITION:
      return getPosition();

    case QUERY_ID:
      return getQueryID();

    case KEYWORD_ID:
      return getKeywordID();

    case TITLE_ID:
      return getTitleID();

    case DESCRIPTION_ID:
      return getDescriptionID();

    case USER_ID:
      return getUserID();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ROW_ID:
      return isSetRowID();
    case CLICKS:
      return isSetClicks();
    case IMPRESSION:
      return isSetImpression();
    case DISPLAY_URL:
      return isSetDisplayURL();
    case AD_ID:
      return isSetAdID();
    case ADVERTISER_ID:
      return isSetAdvertiserID();
    case DEPTH:
      return isSetDepth();
    case POSITION:
      return isSetPosition();
    case QUERY_ID:
      return isSetQueryID();
    case KEYWORD_ID:
      return isSetKeywordID();
    case TITLE_ID:
      return isSetTitleID();
    case DESCRIPTION_ID:
      return isSetDescriptionID();
    case USER_ID:
      return isSetUserID();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AdRequest)
      return this.equals((AdRequest)that);
    return false;
  }

  public boolean equals(AdRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rowID = true;
    boolean that_present_rowID = true;
    if (this_present_rowID || that_present_rowID) {
      if (!(this_present_rowID && that_present_rowID))
        return false;
      if (this.rowID != that.rowID)
        return false;
    }

    boolean this_present_clicks = true;
    boolean that_present_clicks = true;
    if (this_present_clicks || that_present_clicks) {
      if (!(this_present_clicks && that_present_clicks))
        return false;
      if (this.clicks != that.clicks)
        return false;
    }

    boolean this_present_impression = true;
    boolean that_present_impression = true;
    if (this_present_impression || that_present_impression) {
      if (!(this_present_impression && that_present_impression))
        return false;
      if (this.impression != that.impression)
        return false;
    }

    boolean this_present_displayURL = true && this.isSetDisplayURL();
    boolean that_present_displayURL = true && that.isSetDisplayURL();
    if (this_present_displayURL || that_present_displayURL) {
      if (!(this_present_displayURL && that_present_displayURL))
        return false;
      if (!this.displayURL.equals(that.displayURL))
        return false;
    }

    boolean this_present_adID = true;
    boolean that_present_adID = true;
    if (this_present_adID || that_present_adID) {
      if (!(this_present_adID && that_present_adID))
        return false;
      if (this.adID != that.adID)
        return false;
    }

    boolean this_present_advertiserID = true;
    boolean that_present_advertiserID = true;
    if (this_present_advertiserID || that_present_advertiserID) {
      if (!(this_present_advertiserID && that_present_advertiserID))
        return false;
      if (this.advertiserID != that.advertiserID)
        return false;
    }

    boolean this_present_depth = true;
    boolean that_present_depth = true;
    if (this_present_depth || that_present_depth) {
      if (!(this_present_depth && that_present_depth))
        return false;
      if (this.depth != that.depth)
        return false;
    }

    boolean this_present_position = true;
    boolean that_present_position = true;
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (this.position != that.position)
        return false;
    }

    boolean this_present_queryID = true;
    boolean that_present_queryID = true;
    if (this_present_queryID || that_present_queryID) {
      if (!(this_present_queryID && that_present_queryID))
        return false;
      if (this.queryID != that.queryID)
        return false;
    }

    boolean this_present_keywordID = true;
    boolean that_present_keywordID = true;
    if (this_present_keywordID || that_present_keywordID) {
      if (!(this_present_keywordID && that_present_keywordID))
        return false;
      if (this.keywordID != that.keywordID)
        return false;
    }

    boolean this_present_titleID = true;
    boolean that_present_titleID = true;
    if (this_present_titleID || that_present_titleID) {
      if (!(this_present_titleID && that_present_titleID))
        return false;
      if (this.titleID != that.titleID)
        return false;
    }

    boolean this_present_descriptionID = true;
    boolean that_present_descriptionID = true;
    if (this_present_descriptionID || that_present_descriptionID) {
      if (!(this_present_descriptionID && that_present_descriptionID))
        return false;
      if (this.descriptionID != that.descriptionID)
        return false;
    }

    boolean this_present_userID = true;
    boolean that_present_userID = true;
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (this.userID != that.userID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rowID);

    hashCode = hashCode * 8191 + clicks;

    hashCode = hashCode * 8191 + impression;

    hashCode = hashCode * 8191 + ((isSetDisplayURL()) ? 131071 : 524287);
    if (isSetDisplayURL())
      hashCode = hashCode * 8191 + displayURL.hashCode();

    hashCode = hashCode * 8191 + adID;

    hashCode = hashCode * 8191 + advertiserID;

    hashCode = hashCode * 8191 + depth;

    hashCode = hashCode * 8191 + position;

    hashCode = hashCode * 8191 + queryID;

    hashCode = hashCode * 8191 + keywordID;

    hashCode = hashCode * 8191 + titleID;

    hashCode = hashCode * 8191 + descriptionID;

    hashCode = hashCode * 8191 + userID;

    return hashCode;
  }

  @Override
  public int compareTo(AdRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRowID()).compareTo(other.isSetRowID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowID, other.rowID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClicks()).compareTo(other.isSetClicks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClicks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clicks, other.clicks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImpression()).compareTo(other.isSetImpression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImpression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impression, other.impression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisplayURL()).compareTo(other.isSetDisplayURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayURL, other.displayURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdID()).compareTo(other.isSetAdID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adID, other.adID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdvertiserID()).compareTo(other.isSetAdvertiserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvertiserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advertiserID, other.advertiserID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDepth()).compareTo(other.isSetDepth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depth, other.depth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQueryID()).compareTo(other.isSetQueryID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryID, other.queryID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeywordID()).compareTo(other.isSetKeywordID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeywordID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywordID, other.keywordID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitleID()).compareTo(other.isSetTitleID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleID, other.titleID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescriptionID()).compareTo(other.isSetDescriptionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescriptionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descriptionID, other.descriptionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AdRequest(");
    boolean first = true;

    sb.append("rowID:");
    sb.append(this.rowID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clicks:");
    sb.append(this.clicks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("impression:");
    sb.append(this.impression);
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayURL:");
    if (this.displayURL == null) {
      sb.append("null");
    } else {
      sb.append(this.displayURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adID:");
    sb.append(this.adID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("advertiserID:");
    sb.append(this.advertiserID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("depth:");
    sb.append(this.depth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("position:");
    sb.append(this.position);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryID:");
    sb.append(this.queryID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("keywordID:");
    sb.append(this.keywordID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("titleID:");
    sb.append(this.titleID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("descriptionID:");
    sb.append(this.descriptionID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userID:");
    sb.append(this.userID);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AdRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AdRequestStandardScheme getScheme() {
      return new AdRequestStandardScheme();
    }
  }

  private static class AdRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<AdRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AdRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rowID = iprot.readI64();
              struct.setRowIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLICKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clicks = iprot.readI32();
              struct.setClicksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.impression = iprot.readI32();
              struct.setImpressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISPLAY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayURL = iprot.readString();
              struct.setDisplayURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adID = iprot.readI32();
              struct.setAdIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ADVERTISER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.advertiserID = iprot.readI32();
              struct.setAdvertiserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEPTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.depth = iprot.readI16();
              struct.setDepthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.position = iprot.readI16();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryID = iprot.readI32();
              struct.setQueryIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // KEYWORD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keywordID = iprot.readI32();
              struct.setKeywordIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TITLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.titleID = iprot.readI32();
              struct.setTitleIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DESCRIPTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.descriptionID = iprot.readI32();
              struct.setDescriptionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userID = iprot.readI32();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AdRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ROW_ID_FIELD_DESC);
      oprot.writeI64(struct.rowID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLICKS_FIELD_DESC);
      oprot.writeI32(struct.clicks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IMPRESSION_FIELD_DESC);
      oprot.writeI32(struct.impression);
      oprot.writeFieldEnd();
      if (struct.displayURL != null) {
        oprot.writeFieldBegin(DISPLAY_URL_FIELD_DESC);
        oprot.writeString(struct.displayURL);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AD_ID_FIELD_DESC);
      oprot.writeI32(struct.adID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADVERTISER_ID_FIELD_DESC);
      oprot.writeI32(struct.advertiserID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEPTH_FIELD_DESC);
      oprot.writeI16(struct.depth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_FIELD_DESC);
      oprot.writeI16(struct.position);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
      oprot.writeI32(struct.queryID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KEYWORD_ID_FIELD_DESC);
      oprot.writeI32(struct.keywordID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TITLE_ID_FIELD_DESC);
      oprot.writeI32(struct.titleID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DESCRIPTION_ID_FIELD_DESC);
      oprot.writeI32(struct.descriptionID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AdRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AdRequestTupleScheme getScheme() {
      return new AdRequestTupleScheme();
    }
  }

  private static class AdRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<AdRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AdRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRowID()) {
        optionals.set(0);
      }
      if (struct.isSetClicks()) {
        optionals.set(1);
      }
      if (struct.isSetImpression()) {
        optionals.set(2);
      }
      if (struct.isSetDisplayURL()) {
        optionals.set(3);
      }
      if (struct.isSetAdID()) {
        optionals.set(4);
      }
      if (struct.isSetAdvertiserID()) {
        optionals.set(5);
      }
      if (struct.isSetDepth()) {
        optionals.set(6);
      }
      if (struct.isSetPosition()) {
        optionals.set(7);
      }
      if (struct.isSetQueryID()) {
        optionals.set(8);
      }
      if (struct.isSetKeywordID()) {
        optionals.set(9);
      }
      if (struct.isSetTitleID()) {
        optionals.set(10);
      }
      if (struct.isSetDescriptionID()) {
        optionals.set(11);
      }
      if (struct.isSetUserID()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetRowID()) {
        oprot.writeI64(struct.rowID);
      }
      if (struct.isSetClicks()) {
        oprot.writeI32(struct.clicks);
      }
      if (struct.isSetImpression()) {
        oprot.writeI32(struct.impression);
      }
      if (struct.isSetDisplayURL()) {
        oprot.writeString(struct.displayURL);
      }
      if (struct.isSetAdID()) {
        oprot.writeI32(struct.adID);
      }
      if (struct.isSetAdvertiserID()) {
        oprot.writeI32(struct.advertiserID);
      }
      if (struct.isSetDepth()) {
        oprot.writeI16(struct.depth);
      }
      if (struct.isSetPosition()) {
        oprot.writeI16(struct.position);
      }
      if (struct.isSetQueryID()) {
        oprot.writeI32(struct.queryID);
      }
      if (struct.isSetKeywordID()) {
        oprot.writeI32(struct.keywordID);
      }
      if (struct.isSetTitleID()) {
        oprot.writeI32(struct.titleID);
      }
      if (struct.isSetDescriptionID()) {
        oprot.writeI32(struct.descriptionID);
      }
      if (struct.isSetUserID()) {
        oprot.writeI32(struct.userID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AdRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.rowID = iprot.readI64();
        struct.setRowIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clicks = iprot.readI32();
        struct.setClicksIsSet(true);
      }
      if (incoming.get(2)) {
        struct.impression = iprot.readI32();
        struct.setImpressionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.displayURL = iprot.readString();
        struct.setDisplayURLIsSet(true);
      }
      if (incoming.get(4)) {
        struct.adID = iprot.readI32();
        struct.setAdIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.advertiserID = iprot.readI32();
        struct.setAdvertiserIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.depth = iprot.readI16();
        struct.setDepthIsSet(true);
      }
      if (incoming.get(7)) {
        struct.position = iprot.readI16();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.queryID = iprot.readI32();
        struct.setQueryIDIsSet(true);
      }
      if (incoming.get(9)) {
        struct.keywordID = iprot.readI32();
        struct.setKeywordIDIsSet(true);
      }
      if (incoming.get(10)) {
        struct.titleID = iprot.readI32();
        struct.setTitleIDIsSet(true);
      }
      if (incoming.get(11)) {
        struct.descriptionID = iprot.readI32();
        struct.setDescriptionIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.userID = iprot.readI32();
        struct.setUserIDIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

